/*
*******************************************************************************
* Copyright (c) 2023 by M5Stack
*                  Equipped with M5Core sample source code
*                          配套  M5Core 示例源代码
* Visit for more information: https://docs.m5stack.com/en/module/pm2.5
* 获取更多资料请访问: https://docs.m5stack.com/zh_CN/module/pm2.5
*
* Describe: pm2.5.
* Date: 2021/9/2
*******************************************************************************
  Use PM2.5 module and SHT20 base to read, the current particulate matter
concentration and temperature and humidity data.
  使用PM2.5模块和SHT20底座读取当前颗粒物浓度和温湿度数据。
*/

#include <M5Stack.h>
#include <DFRobot_SHT20.h>
#include <Wire.h>

#define DATA_LEN 32  // Length of data received from PMSA003
uint8_t Air_val[DATA_LEN] = {0};  // Array to store raw sensor data
int16_t p_val[16] = {0};  // Array to store parsed sensor values
uint8_t i = 0;  // Index for reading PMSA003 data

#define X_LOCAL 40
#define Y_LOCAL 30
#define X_OFFSET 160
#define Y_OFFSET 23
#define FRONT 2

// Function to initialize hardware (LCD, UART for PMSA003)
void initialize_hardware() {
    // Initialize M5Stack
    M5.begin();
    M5.Lcd.clear(TFT_WHITE);

    // Initialize Serial communication with PMSA003 sensor (UART)
    Serial.begin(115200);
    Serial2.begin(9600, SERIAL_8N1, 16, 17);  // TX=17, RX=16 (UART1 for PMSA003)

    Serial.println("Hardware initialized");
}

// Function to initialize UI (labels for PM1.0, PM2.5, PM10, etc.)
void initialize_ui() {
    M5.Lcd.setTextSize(2);  // Set the font size
    M5.Lcd.setTextColor(TFT_BLACK);

    // Display static labels for PM values
    M5.Lcd.setCursor(16, 20);
    M5.Lcd.print("PM1.0:");
    M5.Lcd.setCursor(16, 46);
    M5.Lcd.print("PM2.5:");
    M5.Lcd.setCursor(16, 72);
    M5.Lcd.print("PM10:");

    Serial.println("UI initialized");
}

// Structure to hold sensor data
struct SensorData {
    int pm1;
    int pm25;
    int pm10;
    bool dataAvailable;
};

// Function to read sensor data from PMSA003 with UART check
SensorData read_sensors() {
    SensorData data = {0};  // Default values
    unsigned long timeout = millis() + 1000;  // Set a timeout of 1 second
    bool uartDataReceived = false;

    // Try reading until we have a full frame or timeout
    while (millis() < timeout) {
        if (Serial2.available()) {
            Air_val[i] = Serial2.read();  // Read a byte from the sensor
            i++;
            uartDataReceived = true;
        }

        // If we have received a full data frame
        if (i == DATA_LEN) {
            // Process the data from Air_val into p_val
            for (int j = 0, k = 0; j < DATA_LEN; j++) {
                if (j % 2 == 0) {
                    p_val[k] = Air_val[j] << 8;  // High byte
                } else {
                    p_val[k] |= Air_val[j];  // Low byte
                    k++;
                }
            }
            
            // Assign PM1.0, PM2.5, PM10 values to the struct
            data.pm1 = p_val[2];   // PM1.0 value
            data.pm25 = p_val[3];  // PM2.5 value
            data.pm10 = p_val[4];  // PM10 value
            data.dataAvailable = true;  // Indicate that data was received

            // Reset index for the next data frame
            i = 0;
            break;
        }
    }

    if (!uartDataReceived) {
        data.dataAvailable = false;  // No data received from UART
    }

    return data;
}

// Function to update the screen with sensor data
void update_screen(SensorData sensorData) {
    // Clear the screen and redraw the labels
    //M5.Lcd.clear(TFT_WHITE);
    //initialize_ui();

    // Display the sensor values or "N/A" if no data was received
    M5.Lcd.setCursor(80, 20);
    if (sensorData.dataAvailable)
        M5.Lcd.printf("%d", sensorData.pm1);
    else
        M5.Lcd.print("N/A");

    M5.Lcd.setCursor(80, 46);
    if (sensorData.dataAvailable)
        M5.Lcd.printf("%d", sensorData.pm25);
    else
        M5.Lcd.print("N/A");

    M5.Lcd.setCursor(80, 72);
    if (sensorData.dataAvailable)
        M5.Lcd.printf("%d", sensorData.pm10);
    else
        M5.Lcd.print("N/A");

    Serial.println("Screen updated with sensor data");
}

// Arduino setup function (called once)
void setup() {
    Serial.begin(115200);
    
    // Initialize hardware and UI
    initialize_hardware();
    initialize_ui();
}

// Arduino main loop (called repeatedly)
void loop() {
    // Read sensor data from PMSA003
    SensorData sensorData = read_sensors();

    // Update the screen with the sensor values
    update_screen(sensorData);

    // Wait for 1 second before updating again
    delay(1000);
}